variables:
  - group: cli_release_credentials
  - name: System.Debug
    value: true

jobs:
  # - job: build_info
  #   pool:
  #     vmImage: ubuntu-16.04
  #   steps:
  #     - script: echo "##vso[task.setvariable variable=version;isOutput=true] ./scripts/version"
  #       name: set_package_version
  - job: lint
    condition: eq(variables['Build.Reason'], 'PullRequest')
    pool:
      vmImage: ubuntu-16.04
    variables:
      CI: true
    timeoutInMinutes: 10
    steps:
      - task: NodeTool@0
        inputs:
          versionSpec: 10
      - task: UsePythonVersion@0
        inputs:
          versionSpec: "2.7"
          architecture: "x64"
      - script: |
          sudo apt-get update && sudo apt-get install -y nasm
          npm install -g yarn
          yarn install --no-progress && yarn bootstrap
          mkdir ./artifacts
        name: Install
      - script: yarn test:lint
        name: Lint
      - script: yarn test:format
        name: Format
      - task: PublishTestResults@2
        condition: always()
        inputs:
          testResultsFiles: "**/*junit.xml"
          searchFolder: $(Build.SourcesDirectory)/artifacts

  - job: linux
    pool:
      vmImage: ubuntu-16.04
    strategy:
      maxParallel: 3
      matrix:
        node-8:
          node_version: 8
        node-10-3:
          node_version: 10.3
        node-latest:
          node_version: ">=10"
          node_check_latest: true
    variables:
      CI: true
    timeoutInMinutes: 15
    steps:
      - task: NodeTool@0
        inputs:
          versionSpec: $(node_version)
          checkLatest: $(node_check_latest)
      - task: UsePythonVersion@0
        inputs:
          versionSpec: "2.7"
          architecture: "x64"
      - script: |
          sudo apt-get update && sudo apt-get install -y nasm
          npm install -g yarn
          yarn install --no-progress && yarn bootstrap
        name: Install
      - script: yarn build && yarn bundle
        name: Build
      - script: yarn test
        name: Test
      - task: PublishTestResults@2
        condition: always()
        inputs:
          testResultsFiles: "**/*junit.xml"
          searchFolder: $(Build.SourcesDirectory)/artifacts

  - job: macOS
    pool:
      vmImage: xcode9-macos10.13
    strategy:
      maxParallel: 3
      matrix:
        # node-8:
        #   node_version: 8
        # node-10-3:
        #   node_version: 10.3
        node-latest:
          node_version: ">=10"
          node_check_latest: true
          build_cli_bundle: true
    variables:
      CI: true
    timeoutInMinutes: 15
    steps:
      - task: NodeTool@0
        inputs:
          versionSpec: $(node_version)
          checkLatest: $(node_check_latest)
      - script: yarn install --no-progress && yarn bootstrap
        name: Install
      - script: yarn build && yarn bundle
        name: Build
      - script: yarn test
        name: Test
        enabled: false
      - task: PublishTestResults@2
        condition: always()
        enabled: false
        inputs:
          testResultsFiles: "**/*junit.xml"
          searchFolder: $(Build.SourcesDirectory)/artifacts
      # - task: ArchiveFiles@2
      #   inputs:
      #     rootFolderOrFile: "$(Build.SourcesDirectory)"
      #     includeRootFolder: true
      #     replaceExistingArchive: true
      #     #verbose: # Optional
      #     #quiet: # Optional
      #     archiveFile: "$(Build.ArtifactStagingDirectory)/working_dir.zip"
      # - task: PublishPipelineArtifact@0
      #   inputs:
      #     artifactName: "working-dir"
      #     targetPath: "$(Build.ArtifactStagingDirectory)/working_dir.zip"
      # - task: PublishPipelineArtifact@0
      #   inputs:
      #     artifactName: "working-dir"
      #     targetPath: $(Build.SourcesDirectory)

  - job: macos_cli
    dependsOn: macos
    pool:
      vmImage: xcode9-macos10.13
    variables:
      a: b
      cli_version: 0.48.0-pre.1
    steps:
      - task: NodeTool@0
        inputs:
          versionSpec: 11.10.1
      # - checkout: none #skip checking out the default repository resource
      # - task: DownloadPipelineArtifact@0
      #   inputs:
      #     artifactName: "working-dir"
      #     downloadPath: "$(Build.ArtifactStagingDirectory)/working_dir.zip"
      # - task: ExtractFiles@1
      #   inputs:
      #     archiveFilePatterns: '*.zip'
      #     destinationFolder: "$(Build.ArtifactStagingDirectory)/working_dir"
      # - bash: ls -lah
      - script: yarn install --no-progress && yarn bootstrap
        name: Install
      - script: yarn build && yarn bundle
        name: Build
      - script: echo "##vso[task.setvariable variable=version;isOutput=true] ./scripts/version"
        name: set_package_version
      - script: echo fly-$(cli_version)-darwin-x64.tar.gz
      - script: ./scripts/release/pack darwin-x64 $(Build.SourcesDirectory)/artifacts/dist
        name: pack_cli
      - task: PublishPipelineArtifact@0
        inputs:
          artifactName: fly-v$(cli_version)-darwin-x64.tar.gz
          targetPath: $(Build.SourcesDirectory)/artifacts/dist/fly-v$(cli_version)-darwin-x64.tar.gz
      # - task: PublishPipelineArtifact@0
      #   inputs:
      #     artifactName: "fly-"
      #     targetPath: "src/MyWebApp/bin/Release/netcoreapp2.0/linux-x64/publish"
      # - script: ./scripts/release/upload-builds $(Build.SourcesDirectory)/artifacts/dist
      #   name: upload_cli_builds
      #   env:
      #     RELEASE_ACCESS_KEY_ID: $(RELEASE_ACCESS_KEY_ID)
      #     RELEASE_SECRET_ACCESS_KEY: $(RELEASE_SECRET_ACCESS_KEY)
      #     RELEASE_ENDPOINT: $(RELEASE_ENDPOINT)

  - job: linux_cli
    dependsOn: linux
    pool:
      vmImage: ubuntu-16.04
    variables:
      a: b
      cli_version: 0.48.0-pre.1
    steps:
      - task: NodeTool@0
        inputs:
          versionSpec: 11.10.1
      - task: UsePythonVersion@0
        inputs:
          versionSpec: "2.7"
          architecture: "x64"
      - script: |
          sudo apt-get update && sudo apt-get install -y nasm
          npm install -g yarn
          yarn install --no-progress && yarn bootstrap
        name: Install
      - script: yarn build && yarn bundle
        name: Build
      - script: echo "##vso[task.setvariable variable=version;isOutput=true] ./scripts/version"
        name: set_package_version
      - script: echo fly-$(cli_version)-linux-x64.tar.gz
      - script: ./scripts/release/pack linux-x64 $(Build.SourcesDirectory)/artifacts/dist
        name: pack_cli
      - task: PublishPipelineArtifact@0
        inputs:
          artifactName: fly-v$(cli_version)-linux-x64.tar.gz
          targetPath: $(Build.SourcesDirectory)/artifacts/dist/fly-v$(cli_version)-linux-x64.tar.gz
      # - task: PublishPipelineArtifact@0
      #   inputs:
      #     artifactName: "fly-"
      #     targetPath: "src/MyWebApp/bin/Release/netcoreapp2.0/linux-x64/publish"
      # - script: ./scripts/release/upload-builds $(Build.SourcesDirectory)/artifacts/dist
      #   name: upload_cli_builds
      #   env:
      #     RELEASE_ACCESS_KEY_ID: $(RELEASE_ACCESS_KEY_ID)
      #     RELEASE_SECRET_ACCESS_KEY: $(RELEASE_SECRET_ACCESS_KEY)
      #     RELEASE_ENDPOINT: $(RELEASE_ENDPOINT)

  - job: publish_cli
    dependsOn: macos_cli
    pool:
      vmImage: ubuntu-16.04
    steps:
      - task: DownloadPipelineArtifact@1
        inputs:
          targetPath: $(System.DefaultWorkingDirectory)
      - bash: ls -lah
      - bash: ls -lah $(System.DefaultWorkingDirectory)
  # - job: Windows
  #   pool:
  #     vmImage: vs2017-win2016
  #   strategy:
  #     maxParallel: 3
  #     matrix:
  #       node-8:
  #         node_version: 8
  #       node-10-3:
  #         node_version: 10.3
  #       node-latest:
  #         node_version: ">=10"
  #         node_check_latest: true
  #   variables:
  #     CI: true
  #   timeoutInMinutes: 10
  #   steps:
  #     - task: NodeTool@0
  #       inputs:
  #         versionSpec: $(node_version)
  #         checkLatest: $(node_check_latest)
  #     # for node-gyp
  #     # - task: UsePythonVersion@0
  #     #   inputs:
  #     #     versionSpec: '2.7'
  #     #     architecture: 'x64'
  #     - script: npm install --global windows-build-tools
  #       displayName: "Install windows build tools"
  #     - script: npm install -g yarn
  #       displayName: "Install yarn"
  #     - script: yarn install --no-progress
  #       displayName: "yarn install"
  #     - script: yarn bootstrap --no-progress
  #       displayName: "yarn bootstrap"
  #     - script: yarn build && yarn bundle
  #       displayName: "yarn build && yarn bundle"
  #       name: Build
  #     - script: yarn test
  #       displayName: "yarn test"
  #       name: Test
  #     - task: PublishTestResults@2
  #       condition: always()
  #       inputs:
  #         testResultsFiles: "**/*junit.xml"
  #         searchFolder: $(Build.SourcesDirectory)/artifacts
