variables:
  - group: cli_release_credentials
  - name: System.Debug
    value: true
  - name: cli_node_version
    value: 11.10.1
  - name: node_version
    value: 11.10.1
  - name: yarn_version
    value: 1.15.2

jobs:
  - job: test
    strategy:
      maxParallel: 2
      matrix:
        mac:
          vm: macOS-10.13
        linux:
          vm: ubuntu-16.04
    pool:
      vmImage: $(vm)
    variables:
      CI: true
    timeoutInMinutes: 20
    steps:
      - bash: echo $(Agent.JobName)
      - task: NodeTool@0
        inputs:
          versionSpec: $(node_version)
      - task: geeklearningio.gl-vsts-tasks-yarn.yarn-installer-task.YarnInstaller@2
        inputs:
          versionSpec: $(yarn_version)
      - bash: yarn install --no-progress && yarn bootstrap
        displayName: Setup Dependencies
      - bash: yarn build && yarn bundle
        displayName: Build
      - bash: yarn test
        displayName: Test
        enabled: false
      - task: PublishTestResults@2
        condition: always()
        enabled: false
        inputs:
          testResultsFiles: "**/*junit.xml"
          searchFolder: $(Build.SourcesDirectory)/artifacts
      - task: PublishPipelineArtifact@0
        inputs:
          artifactName: "working-dir-$(Agent.JobName)"
          targetPath: $(Build.SourcesDirectory)
  - job: build_cli
    dependsOn: test
    strategy:
      maxParallel: 2
      matrix:
        mac:
          vm: xcode9-macos10.13
          target: darwin-x64
        linux:
          vm: ubuntu-16.04
          target: linux-x64
    pool:
      vmImage: $(vm)
    steps:
      - checkout: none
      - task: DownloadPipelineArtifact@1
        inputs:
          artifactName: "working-dir-$(Agent.JobName)"
          downloadPath: $(Build.SourcesDirectory)
      - bash: find $(Build.SourcesDirectory)
      - task: NodeTool@0
        inputs:
          versionSpec: $(node_version)
      - task: geeklearningio.gl-vsts-tasks-yarn.yarn-installer-task.YarnInstaller@2
        inputs:
          versionSpec: $(yarn_version)
      - bash: ./scripts/release/pack $(target)
        workingDirectory: $(Build.SourcesDirectory)/working-dir-$(Agent.JobName)
        displayName: Pack CLI Bundle
      - task: PublishPipelineArtifact@0
        inputs:
          artifactName: cli-$(target)
          targetPath: $(Build.SourcesDirectory)/working-dir-$(Agent.JobName)/packages/cli/dist

  - job: publish_cli
    dependsOn: build_cli
    pool:
      vmImage: ubuntu-16.04
    steps:
      - checkout: none
      - task: NodeTool@0
        inputs:
          versionSpec: $(node_version)
      - task: geeklearningio.gl-vsts-tasks-yarn.yarn-installer-task.YarnInstaller@2
        inputs:
          versionSpec: $(yarn_version)
      - task: DownloadPipelineArtifact@1
        displayName: Download working directory
        inputs:
          artifactName: "working-dir-linux"
          downloadPath: $(Build.SourcesDirectory)
      - task: DownloadPipelineArtifact@1
        displayName: Download builds
        inputs:
          downloadPath: $(Build.StagingDirectory)/dist
      - bash: find $(Build.StagingDirectory)/dist -name 'cli-*' -exec rsync -rv '{}/' $(Build.SourcesDirectory)/working-dir-linux/packages/cli/dist/ \;
        displayName: Move builds to dist
      - bash: yarn oclif-dev publish
        workingDirectory: $(Build.SourcesDirectory)/working-dir-linux/packages/cli
        env:
          AWS_ACCESS_KEY_ID: $(RELEASE_ACCESS_KEY_ID)
          AWS_SECRET_ACCESS_KEY: $(RELEASE_SECRET_ACCESS_KEY)
          AWS_S3_ENDPOINT: $(RELEASE_ENDPOINT)
      # - bash: mkdir -p $(Build.SourcesDirectory)/packages/cli/dist
      # - bash: find $(Build.ArtifactStagingDirectory)
      #   displayName: Build.ArtifactStagingDirectory
      # - bash: find $(Build.StagingDirectory)
      #   displayName: System.StagingDirectory
      # - bash: find $(Build.SourcesDirectory)
      #   displayName: SourcesDirectory
      # - bash: find $(Build.ArtifactsDirectory)
      #   displayName: ArtifactsDirectory
      # - bash: find $(Build.StagingDirectory)/dist -name 'cli-*'
      # - bash: find $(Build.StagingDirectory)/dist -name 'cli-*' -exec rsync -rv '{}/' $(Build.SourcesDirectory)/packages/cli/dist/ \;
      # - task: NodeTool@0
      #   inputs:
      #     versionSpec: $(cli_node_version)
      # - task: UsePythonVersion@0
      #   inputs:
      #     versionSpec: "2.7"
      #     architecture: "x64"
      # - script: |
      #     sudo apt-get update && sudo apt-get install -y nasm
      #     npm install -g yarn
      #     yarn install --no-progress && yarn bootstrap
      #   name: Install
      # - bash: yarn oclif-dev publish
      #   workingDirectory: $(Build.SourcesDirectory)/packages/cli
      #   env:
      #     AWS_ACCESS_KEY_ID: $(RELEASE_ACCESS_KEY_ID)
      #     AWS_SECRET_ACCESS_KEY: $(RELEASE_SECRET_ACCESS_KEY)
      #     AWS_S3_ENDPOINT: $(RELEASE_ENDPOINT)
  # - job: macos_cli
  #   # dependsOn: macos
  #   pool:
  #     vmImage: xcode9-macos10.13
  #   variables:
  #     a: b
  #     cli_version: 0.48.0-pre.1
  #   steps:
  #     - task: NodeTool@0
  #       inputs:
  #         versionSpec: $(cli_node_version)
  #     - task: geeklearningio.gl-vsts-tasks-yarn.yarn-installer-task.YarnInstaller@2
  #       inputs:
  #         versionSpec: $(yarn_version)
  #     # - checkout: none #skip checking out the default repository resource
  #     # - task: DownloadPipelineArtifact@0
  #     #   inputs:
  #     #     artifactName: "working-dir"
  #     #     downloadPath: "$(Build.ArtifactStagingDirectory)/working_dir.zip"
  #     # - task: ExtractFiles@1
  #     #   inputs:
  #     #     archiveFilePatterns: '*.zip'
  #     #     destinationFolder: "$(Build.ArtifactStagingDirectory)/working_dir"
  #     # - bash: ls -lah
  #     - script: yarn install --no-progress && yarn bootstrap
  #       name: Install
  #     - script: yarn build && yarn bundle
  #       name: Build
  #     - script: echo "##vso[task.setvariable variable=version;isOutput=true] ./scripts/version"
  #       name: set_package_version
  #     - script: echo fly-$(cli_version)-darwin-x64.tar.gz
  #     - script: ./scripts/release/pack darwin-x64
  #       name: pack_cli
  #     - task: PublishPipelineArtifact@0
  #       inputs:
  #         artifactName: cli-darwin-x64
  #         targetPath: $(Build.SourcesDirectory)/packages/cli/dist
  # - job: linux_cli
  #   # dependsOn: linux
  #   pool:
  #     vmImage: ubuntu-16.04
  #   variables:
  #     a: b
  #     cli_version: 0.48.0-pre.1
  #   steps:
  #     - task: NodeTool@0
  #       inputs:
  #         versionSpec: $(cli_node_version)
  #     - task: geeklearningio.gl-vsts-tasks-yarn.yarn-installer-task.YarnInstaller@2
  #       inputs:
  #         versionSpec: $(yarn_version)
  #     - script: yarn install --no-progress && yarn bootstrap
  #       name: Install
  #     # - task: UsePythonVersion@0
  #     #   inputs:
  #     #     versionSpec: "2.7"
  #     #     architecture: "x64"
  #     # - script: |
  #     #     sudo apt-get update && sudo apt-get install -y nasm
  #     #     npm install -g yarn
  #     #     yarn install --no-progress && yarn bootstrap
  #     #   name: Install
  #     - script: yarn build && yarn bundle
  #       name: Build
  #     # - script: echo "##vso[task.setvariable variable=version;isOutput=true] ./scripts/version"
  #     #   name: set_package_version
  #     # - script: echo fly-$(cli_version)-linux-x64.tar.gz
  #     - script: ./scripts/release/pack linux-x64
  #       name: pack_cli
  #     - task: PublishPipelineArtifact@0
  #       inputs:
  #         artifactName: cli-linux-x64
  #         targetPath: $(Build.SourcesDirectory)/packages/cli/dist
  #
  # - job: publish_cli
  #   dependsOn:
  #     - macos_cli
  #     - linux_cli
  #   pool:
  #     vmImage: ubuntu-16.04
  #   steps:
  #     - task: DownloadPipelineArtifact@1
  #       inputs:
  #         downloadPath: $(Build.StagingDirectory)/dist
  #     - bash: mkdir -p $(Build.SourcesDirectory)/packages/cli/dist
  #     - bash: find $(Build.ArtifactStagingDirectory)
  #       displayName: Build.ArtifactStagingDirectory
  #     - bash: find $(Build.StagingDirectory)
  #       displayName: System.StagingDirectory
  #     - bash: find $(Build.SourcesDirectory)
  #       displayName: SourcesDirectory
  #     - bash: find $(Build.ArtifactsDirectory)
  #       displayName: ArtifactsDirectory
  #     - bash: find $(Build.StagingDirectory)/dist -name 'cli-*'
  #     - bash: find $(Build.StagingDirectory)/dist -name 'cli-*' -exec rsync -rv '{}/' $(Build.SourcesDirectory)/packages/cli/dist/ \;
  #     - task: NodeTool@0
  #       inputs:
  #         versionSpec: $(cli_node_version)
  #     - task: UsePythonVersion@0
  #       inputs:
  #         versionSpec: "2.7"
  #         architecture: "x64"
  #     - script: |
  #         sudo apt-get update && sudo apt-get install -y nasm
  #         npm install -g yarn
  #         yarn install --no-progress && yarn bootstrap
  #       name: Install
  #     - bash: yarn oclif-dev publish
  #       workingDirectory: $(Build.SourcesDirectory)/packages/cli
  #       env:
  #         AWS_ACCESS_KEY_ID: $(RELEASE_ACCESS_KEY_ID)
  #         AWS_SECRET_ACCESS_KEY: $(RELEASE_SECRET_ACCESS_KEY)
  #         AWS_S3_ENDPOINT: $(RELEASE_ENDPOINT)
  #
  # - job: Windows
  #   pool:
  #     vmImage: vs2017-win2016
  #   strategy:
  #     maxParallel: 3
  #     matrix:
  #       node-8:
  #         node_version: 8
  #       node-10-3:
  #         node_version: 10.3
  #       node-latest:
  #         node_version: ">=10"
  #         node_check_latest: true
  #   variables:
  #     CI: true
  #   timeoutInMinutes: 10
  #   steps:
  #     - task: NodeTool@0
  #       inputs:
  #         versionSpec: $(node_version)
  #         checkLatest: $(node_check_latest)
  #     # for node-gyp
  #     # - task: UsePythonVersion@0
  #     #   inputs:
  #     #     versionSpec: '2.7'
  #     #     architecture: 'x64'
  #     - script: npm install --global windows-build-tools
  #       displayName: "Install windows build tools"
  #     - script: npm install -g yarn
  #       displayName: "Install yarn"
  #     - script: yarn install --no-progress
  #       displayName: "yarn install"
  #     - script: yarn bootstrap --no-progress
  #       displayName: "yarn bootstrap"
  #     - script: yarn build && yarn bundle
  #       displayName: "yarn build && yarn bundle"
  #       name: Build
  #     - script: yarn test
  #       displayName: "yarn test"
  #       name: Test
  #     - task: PublishTestResults@2
  #       condition: always()
  #       inputs:
  #         testResultsFiles: "**/*junit.xml"
  #         searchFolder: $(Build.SourcesDirectory)/artifacts
